<?php

/**
 * Recipe
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    betterrecipes
 * @subpackage model
 * @author     Rusty Cage <rcage@resolute.com>
 * @version    SVN: $Id: Builder.php 7691 2011-02-04 15:43:29Z jwage $
 */
class Recipe extends BaseRecipe
{

//  public function setUp()
//  {
//    parent::setup();
//    $this->actAs('Sluggable', array(
//      'unique' => true,
//      'fields' => array('name'),
//      'canUpdate' => false
//      )
//    );
//  }


  public function setUp()
  {
    parent::setUp();
    $this->hasOne('User as User2', array(
      'local' => 'updated_by_id',
      'foreign' => 'id'));
  }

  public function save(Doctrine_Connection $conn = null)
  {
    $this->updated_at = date('Y-m-d H:i:s');
    parent::save();
  }

  public function update(Doctrine_Connection $conn = null)
  {
    $this->updated_by_id = intval(sfContext::getInstance()->getUser()->getAttribute('id'));
    $this->save();
  }

  public function getFirstCategory($is_preview = false)
  {
    $q = Doctrine_Query::create()->from('Category c')->innerJoin('c.CategoryRecipe cr')->where('cr.recipe_id = ?', $this->id);
    if (!$is_preview) {
      $q->andWhere('c.is_active = ?', 1);
    }
    $category = $q->orderBy('cr.sequence ASC')->limit(1)->execute()->getFirst();
    if (!$category) {
      $slug = $this->source == 'mb' ? 'mixingbowlrecipes' : 'miscellaneousrecipes';
      $category = Doctrine_Core::getTable('Category')->findOneBySlug($slug);
    }
    return $category;
  }

  public function getUpdatedBy()
  {
    return Doctrine_Core::getTable('User')->find($this->updated_by_id);
  }

  public function hasPhoto()
  {
    return $this->getPhoto()->count() > 0 ? true : false;
  }

  public function hasCategory()
  {
    return $this->getCategoryRecipe()->count() > 0 ? true : false;
  }

  public function getPhotoCount()
  {
    return $this->getPhoto()->count();
  }

  public function getMainImage()
  {
    return Doctrine_Core::getTable('Photo')->createQuery('p')->where('p.recipe_id = ?', $this->getId())->andWhere('p.sequence = ?', 1)->fetchOne();
  }

  public function getMainImageSrc()
  {
    $photo = $this->getPhoto();
    if ($photo->count() > 0) {
      print_r( $photo->getFirst()->getImgSrc() );
      exit;
      return $photo->getFirst()->getImgSrc();
    } else {
      $category = $this->getFirstCategory();
      $main_category = $category->isMainCategory() ? $category : $category->getParent();
      return '/img/recipe-img-placeholders/' . $main_category->getSlug() . '.jpg';
    }
    return $this->getPhoto()->getFirst()->getImage();
  }

  public function getPrimaryImageSrc()
  {
    return $this->getPhoto()->getFirst()->getImgSrc();
  }

  public function getThumb()
  {
    return $this->getPhoto()->getFirst()->getThumb();
  }

  public function getThumbnails()
  {
    return $this->getPhoto();
  }

  public function getSponsorName()
  {
    $q = Doctrine_Core::getTable('Sponsor')->createQuery('s')->leftJoin('s.Recipe r')->where('r.id = ?', $this->getId());
    $sponsor = $q->fetchOne();
    return $sponsor['name'];
  }

  public function getSubcategories($type = 'array')
  {
    $q = Doctrine_Core::getTable('Category')->createQuery('c')->where('c.parent_id IS NOT NULL');
    $q->leftjoin('c.CategoryRecipe cr')->leftjoin('cr.Recipe r')->where('r.id = ?', $this->getId());
    return $type == 'array' ? $q->fetchArray() : $q->execute();
  }

  public function getRecipeCategories()
  {
    return Doctrine_Core::getTable('CategoryRecipe')->createQuery('cr')->where('recipe_id = ?', $this->getId())->orderBy('sequence')->execute();
  }

  public function getParentCategories()
  {
    $q = Doctrine_Core::getTable('Category')->createQuery('c');
    $q->leftjoin('c.CategoryRecipe cr')->leftjoin('cr.Recipe r')->where('r.id = ?', $this->getId())->andWhere('c.parent_id IS NOT NULL');
    $category = $q->fetchArray();
    $parentCategories = array();
    for ($i = 0; $i < count($category); $i++) {
      $q = Doctrine_Core::getTable('Category')->createQuery('c')->select('c.name')->where('c.id = ?', $category[$i]['parent_id']);
      $parentCategories[$i] = $q->fetchOne();
    }
    return $parentCategories;
  }

  public function hasUserRating($user_id)
  {
    return RateTable::getUserRating($this->id, $user_id);
  }

  public function isInGroup($group_id)
  {
    $group_recipe = Doctrine_Core::getTable('GroupRecipe')->findOneByGroupIdAndRecipeId($group_id, $this->id);
    if (!$group_recipe) {
      return false;
    } else
      return true;
  }

  public function generateSlugFromName()
  {
    return UrlToolkit::generateCategoryArticleRecipeFriendlySlug($this->name, 'recipe', $this->id);
  }

  public function updateSlugFromName()
  {
    $slug = $this->generateSlugFromName();
    $this->setSlug($slug)->save();
  }

  public function getCurrentContest()
  {
    $contestant = Doctrine_Core::getTable('Contestant')->createQuery('c')->innerJoin('c.Contest co')->where('co.start_date <= ?', date('Y-m-d'))->andWhere('co.end_date >= ?', date('Y-m-d'))->andWhere('co.is_active = ?', 1)->andWhere('c.recipe_id = ?', $this->id)->andWhere('c.is_active = ?', 1)->orderBy('id DESC')->fetchOne();
    return ($contestant && $contestant->getContest()->isCurrent()) ? $contestant : false;
  }

}
