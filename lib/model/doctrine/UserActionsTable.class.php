<?php

/**
 * UserActionsTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class UserActionsTable extends Doctrine_Table
{

  /**
   * Returns an instance of this class.
   *
   * @return object UserActionsTable
   */
  public static function getInstance()
  {
    return Doctrine_Core::getTable('UserActions');
  }

  public static function getTrendingRecipes($params = array())
  {
    // This is created because all recipes are stored in the DB under the sub category ID, with no reference to parent
    //This method is only called by the categorySuccess page and no others.
    if (isset($params['parent_category_id'])) {
      $range = Utilities::getDateRange();
      $q2 = Doctrine_Core::getTable('Category')->createQuery('u');
      $q2->select('u.id');
      $q2->where('u.parent_id = ?', $params['parent_category_id']);
      $category_ids = $q2->execute();
      foreach ($category_ids as $category_id) {
        $category_id_array[] = $category_id->getId();
      }

      $q = Doctrine_Core::getTable('UserActions')->createQuery('u');
      $q->select('u.recipe_id, COUNT(u.recipe_id) AS popularity');
      $q->innerJoin('u.Recipe r');
      // filter trending recipes by category id 
      $q->innerJoin('r.CategoryRecipe cr');
      $q->where('u.is_active = ?', 1);
      // based on most made (action id = 4)
      $q->andWhere('u.action_id = ?', 4);
      $q->andWhere('r.is_active = ?', 1);
      //$q->andWhere('u.fb_user_id IS NOT NULL');
      // add date range
      $q->andWhere('u.created_at >= ?', $range['start']);
      $q->andWhere('u.created_at <= ?', $range['end']);

      $q->whereIn('cr.category_id', $category_id_array);
      $q->groupBy('u.recipe_id');
      $q->orderBy('popularity DESC');
      if (isset($params['limit'])) {
        $q->limit($params['limit']);
      } else {
        $q->limit(15);
      }
      return $q->execute();
    } else {
      $range = Utilities::getDateRange();
      $q = Doctrine_Core::getTable('UserActions')->createQuery('u');
      $q->select('u.recipe_id, COUNT(u.recipe_id) AS popularity');
      $q->innerJoin('u.Recipe r');
      // filter trending recipes by category id 
      if (isset($params['category_id'])) {
        $q->innerJoin('r.CategoryRecipe cr');
      }
      $q->where('u.is_active = ?', 1);
      // based on most made (action id = 4)
      $q->andWhere('u.action_id = ?', 4);
      $q->andWhere('r.is_active = ?', 1);
      //$q->andWhere('u.fb_user_id IS NOT NULL');
      // add date range
      $q->andWhere('u.created_at >= ?', $range['start']);
      $q->andWhere('u.created_at <= ?', $range['end']);
      if (isset($params['category_id'])) {
        $q->andWhere('cr.category_id = ?', $params['category_id']);
      }
      $q->groupBy('u.recipe_id');
      $q->orderBy('popularity DESC');
      if (isset($params['limit'])) {
        $q->limit($params['limit']);
      } else {
        $q->limit(15);
      }
      return $q->execute();
    }
  }

  // note: use this method to fetch list of recipes by Facebook friend IDs;
  // returns recipe + count of friends who interacted with it
  public static function getRecipesByFriendsList($params = array())
  {
    // note: eventually, we might want to add a date range to cap the activity to a reasonable number
    $q = Doctrine_Core::getTable('UserActions')->createQuery('u');
    $q->select('u.recipe_id, COUNT(DISTINCT u.fb_user_id) AS popularity');
    $q->innerJoin('u.Recipe r');
    // filter trending recipes by category id 
    if (isset($params['category_id'])) {
      $q->innerJoin('r.CategoryRecipe cr');
    }
    $q->where('u.is_active = ? AND r.is_active = ?', array(1, 1));
    if (isset($params['category_id'])) {
      $q->andWhere('cr.category_id = ?', $params['category_id']);
    }
    $q->whereIn('u.fb_user_id', $params['friends']);
    $q->groupBy('u.recipe_id');
    $q->orderBy('popularity DESC');
    if (isset($params['limit'])) {
      $q->limit($params['limit']);
    } else {
      $q->limit(15);
    }
    return $q->execute();
  }

  public static function getUserRecipesSavedNotMade($params = array())
  {
    // fetch all of the user's saved recipes
    $q = Doctrine_Core::getTable('UserActions')->createQuery('u');
    $q->where('u.is_active = ? AND u.user_id = ?', array(1, $params['user_id']));
    $q->whereIn('u.action_id', array(3, 4));
    $saved = $q->execute();
    if ($saved) {
      $removeArray = $savedArray = array();
      // now we loop through results, assign the ids to an array 
      foreach ($saved as $s) {
        if ($s->getActionId() == 4) {
          // if recipe is made, add it to the remove Array
          $removeArray[] = $s->getRecipeId();
        }
        $savedArray[] = $s->getRecipeId();
      }
      // filter out any recipes that have been made
      $result = array_diff($savedArray, $removeArray);
      if (is_null($result)) {
        return array();
      } else {
        $q = Doctrine_Core::getTable('UserActions')->createQuery('u');
        $q->innerJoin('u.Recipe r');
        $q->where('r.is_active = ? AND u.action_id = ? AND u.user_id = ?', array(1, 3, $params['user_id']));
        $q->whereIn('u.recipe_id', array());
        $q->orderBy('u.created_at DESC');
        $q->limit(4);
        return $q->execute();
      }
    }
  }

  // note: use this method in conjunction with above method to retrieve individual detail about each friend associated with specific recipe id
  public static function getRecipeByFriendsDetail($params = array())
  {
    $q = Doctrine_Core::getTable('UserActions')->createQuery('u');
    $q->innerJoin('u.User s');
    $q->where('u.recipe_id = ?', $params['recipe_id']);
    $q->whereIn('u.fb_user_id', $params['friends']);
    $q->groupBy('u.fb_user_id');
    $q->limit(4);
    return $q->execute();
  }

  public static function getActivityRecipeDetailCount($params = array())
  {
    // note: eventually, we might want to add a date range to cap the activity to a reasonable number
    /* $q = Doctrine_Core::getTable('UserActions')->createQuery('u');
      $q->select('COUNT(DISTINCT u.fb_user_id) AS fb_users');
      $q->where('u.is_active = ? AND u.recipe_id = ? AND u.user_id != ?', array(1, $params['recipe_id'], $params['user_id']));
      $q->whereIn('u.action_id', array(3, 4));
      $q->groupBy('u.user_id'); */

    $q = Doctrine_Core::getTable('UserActions')->createQuery('u');
    $q->where('u.is_active = ? AND u.recipe_id = ? AND u.user_id != ?', array(1, $params['recipe_id'], $params['user_id']));
    $q->andWhere('u.fb_user_id != "NULL"');
    $q->whereIn('u.action_id', array(3, 4));
    $q->distinct('u.user_id');
    $q->groupBy('u.user_id');
    return $q->execute();
  }

  public static function getActivityRecipeDetail($params = array())
  {
    $q = Doctrine_Core::getTable('UserActions')->createQuery('u');
    $q->innerJoin('u.User s');
    $q->where('u.is_active = ? AND u.recipe_id = ? AND u.user_id != ?', array(1, $params['recipe_id'], $params['user_id']));
    $q->andWhere('u.fb_user_id != "NULL"');
    $q->whereIn('u.action_id', array(3, 4));
    $q->distinct('u.user_id');
    $q->groupBy('u.user_id');
    $q->orderBy('u.created_at DESC');
    $q->limit(8);
    return $q->execute();
  }

  // note: retrieves a list of friends who have completed a single specific activity
  public static function getActivityByUserFriends($params = array())
  {
    $q = Doctrine_Core::getTable('UserActions')->createQuery('u');
    $q->innerJoin('u.User s');
    $q->where('u.action_id = ?', $params['action_id']);
    if ($params['recipe_id'] == '') {
      $q->andWhere('u.recipe_id is NULL');
    } else {
      $q->andWhere('u.recipe_id = ?', $params['recipe_id']);
    }
    if ($params['poll_id'] == '') {
      $q->andWhere('u.poll_id is NULL');
    } else {
      $q->andWhere('u.poll_id = ?', $params['poll_id']);
    }
    if ($params['contest_id'] == '') {
      $q->andWhere('u.contest_id is NULL');
    } else {
      $q->andWhere('u.contest_id = ?', $params['contest_id']);
    }
    $q->whereIn('u.fb_user_id', $params['friends']);
    return $q->execute();
  }

  // note: the $params should include an associative array of user's Facebook Friend IDs
  public static function getFriendsWithActivity($params = array())
  {
    $params = self::processParams($params);
    // note: in the future we might impose a date range
    $q = new sfDoctrinePager('UserActions', $params['results_per_page']);
    $q->setQuery(Doctrine_Core::getTable('UserActions')
        ->createQuery('u')
        ->innerJoin('u.User s')
        ->where('u.is_active = ?', 1)
        ->whereIn('u.fb_user_id', $params['friends'])
        ->groupBy('u.fb_user_id')
        ->orderby('u.' . $params['sort_by'] . ' ' . $params['direction'])
    );
    $q->setPage($params['page_no']);
    $q->init();
    return $q;
  }

  public static function getFbUserActivity($params = array())
  {
    $params = self::processParams($params);
    $q = new sfDoctrinePager('UserActions', $params['results_per_page']);
    $q->setQuery(Doctrine_Core::getTable('UserActions')
        ->createQuery('u')
        ->leftJoin('u.Recipe r')
        ->where('u.is_active = ? AND u.fb_user_id = ?', array(1, $params['fb_user_id']))
        ->orderby('u.' . $params['sort_by'] . ' ' . $params['direction'])
    );
    $q->setPage($params['page_no']);
    $q->init();
    return $q;
  }

  public static function getUserMadeRecipes($params = array())
  {
    $params = self::processParams($params);
    $madeRecipes = new sfDoctrinePager('UserActions', $params['results_per_page']);
    $madeRecipes->setQuery(
      Doctrine_Core::getTable('UserActions')
        ->createQuery('u')
        ->innerJoin('u.Actions a')
        ->innerJoin('u.Recipe r')
        ->where('u.user_id = ?', $params['user_id'])
        ->andWhere('a.id = ?', 4)
        ->andWhere('r.is_active = ?', 1)
        ->andWhere('u.is_active = ?', 1)
        ->orderby('u.' . $params['sort_by'] . ' ' . $params['direction'])
    );
    $madeRecipes->setPage($params['page_no']);
    $madeRecipes->init();
    return $madeRecipes;
  }

  public static function getUserPlanningToMakeRecipes($params = array())
  {
    $params = self::processParams($params);
    $params['sort_by'] = isset($params['sort_by']) ? $params['sort_by'] : 'created_at';
    $params['direction'] = isset($params['direction']) ? $params['direction'] : 'desc';
    $madeRecipes = new sfDoctrinePager('UserActions', $params['results_per_page']);
    $madeRecipes->setQuery(
      Doctrine_Core::getTable('UserActions')
        ->createQuery('u')
        ->innerJoin('u.Actions a')
        ->innerJoin('u.Recipe r')
        ->where('u.user_id = ?', $params['user_id'])
        ->andWhereIn('a.id', array(2, 3))
        ->andWhere('r.is_active = ?', 1)
        ->andWhere('u.is_active = ?', 1)
        ->groupBy('u.recipe_id')
        ->orderby('u.' . $params['sort_by'] . ' ' . $params['direction'])
    );
    $madeRecipes->setPage($params['page_no']);
    $madeRecipes->init();
    return $madeRecipes;
  }

  public static function getUserClickedRecipes($params = array())
  {
    $params = self::processParams($params);
    $clickedRecipes = new sfDoctrinePager('UserActions', $params['results_per_page']);
    $clickedRecipes->setQuery(Doctrine_Core::getTable('UserActions')
        ->createQuery('u')
        ->innerJoin('u.Actions a')
        ->innerJoin('u.Recipe r')
        ->where('u.user_id = ?', $params['user_id'])
        ->andWhere('a.id = ?', 1)
        ->andWhere('r.is_active = ?', 1)
        ->andWhere('u.is_active = ?', 1)
        ->orderby('u.' . $params['sort_by'] . ' ' . $params['direction'])
    );
    $clickedRecipes->setPage($params['page_no']);
    $clickedRecipes->init();
    return $clickedRecipes;
  }

  public static function getUserPrintedRecipes($params = array())
  {
    $params = self::processParams($params);
    $printedRecipes = new sfDoctrinePager('UserActions', $params['results_per_page']);
    $printedRecipes->setQuery(Doctrine_Core::getTable('UserActions')
        ->createQuery('u')
        ->innerJoin('u.Actions a')
        ->innerJoin('u.Recipe r')
        ->where('u.user_id = ?', $params['user_id'])
        ->andWhere('a.id = ?', 2)
        ->andWhere('r.is_active = ?', 1)
        ->andWhere('u.is_active = ?', 1)
        ->orderby('u.' . $params['sort_by'] . ' ' . $params['direction'])
    );
    $printedRecipes->setPage($params['page_no']);
    $printedRecipes->init();
    return $printedRecipes;
  }

  public static function getUserSavedRecipes($params = array())
  {
    $params = self::processParams($params);
    $savedRecipes = new sfDoctrinePager('UserActions', $params['results_per_page']);
    $savedRecipes->setQuery(Doctrine_Core::getTable('UserActions')
        ->createQuery('u')
        ->innerJoin('u.Actions a')
        ->innerJoin('u.Recipe r')
        ->where('u.user_id = ?', $params['user_id'])
        ->andWhere('a.id = ?', 3)
        ->andWhere('r.is_active = ?', 1)
        ->andWhere('u.is_active = ?', 1)
        ->orderby('u.' . $params['sort_by'] . ' ' . $params['direction'])
    );
    $savedRecipes->setPage($params['page_no']);
    $savedRecipes->init();
    return $savedRecipes;
  }

  public static function getUserRecommendedRecipes($params = array())
  {
    $params = self::processParams($params);
    $recRecipes = new sfDoctrinePager('UserActions', $params['results_per_page']);
    $recRecipes->setQuery(Doctrine_Core::getTable('UserActions')
        ->createQuery('u')
        ->innerJoin('u.Actions a')
        ->innerJoin('u.Recipe r')
        ->where('u.user_id = ?', $params['user_id'])
        ->andWhere('a.id = ?', 5)
        ->andWhere('r.is_active = ?', 1)
        ->andWhere('u.is_active = ?', 1)
        ->orderby('u.' . $params['sort_by'] . ' ' . $params['direction'])
    );
    $recRecipes->setPage($params['page_no']);
    $recRecipes->init();
    return $recRecipes;
  }

  public static function getUserContests($params = array())
  {
    $params = self::processParams($params);
    $contest = new sfDoctrinePager('UserActions', $params['results_per_page']);
    $contest->setQuery(Doctrine_Core::getTable('UserActions')
        ->createQuery('u')
        ->innerJoin('u.Actions a')
        ->innerJoin('u.Recipe r')
        ->innerJoin('u.Contest c')
        ->where('u.user_id = ?', $params['user_id'])
        ->andWhere('a.id = ?', 6)
        ->andWhere('r.is_active = ?', 1)
        ->andWhere('c.is_active = ?', 1)
        ->andWhere('u.is_active = ?', 1)
        ->orderby('u.' . $params['sort_by'] . ' ' . $params['direction'])
    );
    $contest->setPage($params['page_no']);
    $contest->init();
    return $contest;
  }

  public static function getUserContestsVoted($params = array())
  {
    $params = self::processParams($params);
    $contest = new sfDoctrinePager('UserActions', $params['results_per_page']);
    $contest->setQuery(Doctrine_Core::getTable('UserActions')
        ->createQuery('u')
        ->innerJoin('u.Actions a')
        ->innerJoin('u.Recipe r')
        ->innerJoin('u.Contest c')
        ->where('u.user_id = ?', $params['user_id'])
        ->andWhere('a.id = ?', 7)
        ->andWhere('r.is_active = ?', 1)
        ->andWhere('c.is_active = ?', 1)
        ->andWhere('u.is_active = ?', 1)
        ->orderby('u.' . $params['sort_by'] . ' ' . $params['direction'])
    );
    $contest->setPage($params['page_no']);
    $contest->init();
    return $contest;
  }

  public static function getUserVotedPoll($params = array())
  {
    $params = self::processParams($params);
    $poll = new sfDoctrinePager('UserActions', $params['results_per_page']);
    $poll->setQuery(Doctrine_Core::getTable('UserActions')
        ->createQuery('u')
        ->innerJoin('u.Actions a')
        ->innerJoin('u.Poll p')
        ->where('u.user_id = ?', $params['user_id'])
        ->andWhere('a.id = ?', 8)
        ->andWhere('p.active = ?', 1)
        ->andWhere('u.is_active = ?', 1)
        ->orderby('u.' . $params['sort_by'] . ' ' . $params['direction'])
    );
    $poll->setPage($params['page_no']);
    $poll->init();
    return $poll;
  }

  public static function getUserActivities($params = array())
  {
    $params = self::processParams($params);
    $act = new sfDoctrinePager('UserActions', $params['results_per_page']);
    $act->setQuery(Doctrine_Core::getTable('UserActions')
        ->createQuery('u')
        ->innerJoin('u.Actions a')
        ->where('u.user_id = ?', $params['user_id'])
        ->andWhere('u.is_active = ?', 1)
        ->orderby('u.' . $params['sort_by'] . ' ' . $params['direction'])
    );
    $act->setPage($params['page_no']);
    $act->init();
    return $act;
  }

  public static function processParams($params = array())
  {
    if (!isset($params['results_per_page'])) {
      $params['results_per_page'] = 5;
    }
    if (!isset($params['page_no'])) {
      $params['page_no'] = 1;
    }
    if (!isset($params['order_by'])) {
      $params['order_by'] = 'date-desc';
    }
    $params['order_by'] = str_replace('date', 'created_at', $params['order_by']);
    $order_by = explode('-', $params['order_by']);
    $params['sort_by'] = $order_by[0];
    $params['direction'] = $order_by[1];
    return $params;
  }

  public static function deactivateActivity($params = array())
  {
    if (sizeof($params) == 0) {
      return false;
    }
    if (isset($params['user_id']) && isset($params['id'])) {
      $q = Doctrine_Query::create()
        ->update('UserActions u')
        ->set('u.is_active', '?', 0)
        ->set('u.updated_at', '?', date('Y-m-d H:i:s'))
        ->where('u.id = ?', $params['id'])
        ->andWhere('u.user_id = ?', $params['user_id'])
        ->execute();
      return $q;
    } else {
      return false;
    }
  }

  public static function deactivateSaved($params = array())
  {
    if (sizeof($params) == 0) {
      return false;
    }
    if (isset($params['user_id']) && isset($params['recipe_id'])) {
      $q = Doctrine_Query::create()
        ->update('UserActions u')
        ->set('u.is_active', '?', 0)
        ->set('u.updated_at', '?', date('Y-m-d H:i:s'))
        ->where('u.user_id = ? AND u.recipe_id = ? AND u.action_id = ?', array($params['user_id'], $params['recipe_id'], 3))
        ->execute();
    }
  }

  public static function isClicked($recipe_id, $user_id)
  {
    return Doctrine_Core::getTable('UserActions')->createQuery('u')->where('u.action_id = ? AND u.recipe_id = ? AND u.user_id = ?', array(1, $recipe_id, $user_id))->fetchOne() ? true : false;
  }

  public static function isPrinted($recipe_id, $user_id)
  {
    return Doctrine_Core::getTable('UserActions')->createQuery('u')->where('u.action_id = ? AND u.recipe_id = ? AND u.user_id = ?', array(2, $recipe_id, $user_id))->fetchOne() ? true : false;
  }

  public static function isSaved($recipe_id, $user_id)
  {
    return Doctrine_Core::getTable('UserActions')->createQuery('u')->where('u.action_id = ? AND u.recipe_id = ? AND u.user_id = ?', array(3, $recipe_id, $user_id))->fetchOne() ? true : false;
  }

  public static function isMade($recipe_id, $user_id)
  {
    return Doctrine_Core::getTable('UserActions')->createQuery('u')->where('u.action_id = ? AND u.recipe_id = ? AND u.user_id = ?', array(4, $recipe_id, $user_id))->fetchOne() ? true : false;
  }

  public static function isRecommended($recipe_id, $user_id)
  {
    return Doctrine_Core::getTable('UserActions')->createQuery('u')->where('u.action_id = ? AND u.recipe_id = ? AND u.user_id = ?', array(5, $recipe_id, $user_id))->fetchOne() ? true : false;
  }

  public static function isEnteredContest($contestant_id, $user_id)
  {
    return Doctrine_Core::getTable('UserActions')->createQuery('u')->where('u.action_id = ? AND u.contestant_id = ? AND u.user_id = ?', array(6, $contestant_id, $user_id))->fetchOne() ? true : false;
  }

  public static function isVotedRecipeContest($recipe_id, $contestant_id, $user_id)
  {
    return Doctrine_Core::getTable('UserActions')->createQuery('u')->where('u.action_id = ? AND u.recipe_id = ? AND u.contestant_id = ? AND u.user_id = ?', array(7, $recipe_id, $contestant_id, $user_id))->fetchOne() ? true : false;
  }

  public static function isVotedPoll($option_id, $user_id)
  {
    return Doctrine_Core::getTable('UserActions')->createQuery('u')->where('u.action_id = ? AND u.poll_option_id = ? AND u.user_id = ?', array(8, $option_id, $user_id))->fetchOne() ? true : false;
  }

  public static function addActionClicked($recipe_id, $recipe_title, $user_id, $fb_user_id = null, $fb_object_id = null)
  {
    $obj = self::isClicked($recipe_id, $user_id);
    if (!$obj) {
      $action = new UserActions();
      $action->setRecipeId($recipe_id);
      $action->setUserId($user_id);
      $action->setActionId(1);
      $action->setMessage(self::getActionMessage(1, array('recipe' => $recipe_title)));
      if ($fb_user_id && $fb_object_id) {
        $action->setFbUserId($fb_user_id);
        $action->setFbObjectId($fb_object_id);
      }
      $action->setCreatedAt(date('Y-m-d H:i:s'));
      $action->save();
      return $action->getId();
    }
  }

  public static function addActionPrinted($recipe_id, $recipe_title, $user_id, $fb_user_id = null, $fb_object_id = null)
  {
    $obj = self::isPrinted($recipe_id, $user_id);
    if (!$obj) {
      $action = new UserActions();
      $action->setRecipeId($recipe_id);
      $action->setUserId($user_id);
      $action->setActionId(2);
      $action->setMessage(self::getActionMessage(2, array('recipe' => $recipe_title)));
      if ($fb_user_id && $fb_object_id) {
        $action->setFbUserId($fb_user_id);
        $action->setFbObjectId($fb_object_id);
      }
      $action->setCreatedAt(date('Y-m-d H:i:s'));
      $action->save();
      return $action->getId();
    }
  }

  public static function addActionSaved($recipe_id, $recipe_title, $user_id, $fb_user_id = null, $fb_object_id = null)
  {
    $obj = self::isSaved($recipe_id, $user_id);
    if (!$obj) {
      $action = new UserActions();
      $action->setRecipeId($recipe_id);
      $action->setUserId($user_id);
      $action->setActionId(3);
      $action->setMessage(self::getActionMessage(3, array('recipe' => $recipe_title)));
      if ($fb_user_id && $fb_object_id) {
        $action->setFbUserId($fb_user_id);
        $action->setFbObjectId($fb_object_id);
      }
      $action->setCreatedAt(date('Y-m-d H:i:s'));
      $action->save();
      return $action->getId();
    }
  }

  public static function addActionMade($recipe_id, $recipe_title, $user_id, $fb_user_id = null, $fb_object_id = null)
  {
    $obj = self::isMade($recipe_id, $user_id);
    if (!$obj) {
      $action = new UserActions();
      $action->setRecipeId($recipe_id);
      $action->setUserId($user_id);
      $action->setActionId(4);
      $action->setMessage(self::getActionMessage(4, array('recipe' => $recipe_title)));
      if ($fb_user_id && $fb_object_id) {
        $action->setFbUserId($fb_user_id);
        $action->setFbObjectId($fb_object_id);
      }
      $action->setCreatedAt(date('Y-m-d H:i:s'));
      $action->save();
      return $action->getId();
    }
  }

  public static function addActionRecommended($recipe_id, $recipe_title, $user_id, $fb_user_id = null, $fb_object_id = null)
  {
    $obj = self::isRecommended($recipe_id, $user_id);
    if (!$obj) {
      $action = new UserActions();
      $action->setRecipeId($recipe_id);
      $action->setUserId($user_id);
      $action->setActionId(5);
      $action->setMessage(self::getActionMessage(5, array('recipe' => $recipe_title)));
      if ($fb_user_id && $fb_object_id) {
        $action->setFbUserId($fb_user_id);
        $action->setFbObjectId($fb_object_id);
      }
      $action->setCreatedAt(date('Y-m-d H:i:s'));
      $action->save();
      return $action->getId();
    }
  }

  public static function addActionEnteredContest($contestant_id, $contest_title, $user_id, $fb_user_id = null, $fb_object_id = null)
  {
    $obj = self::isEnteredContest($contestant_id, $user_id);
    if (!$obj) {
      $action = new UserActions();
      $contestant = Doctrine_Core::getTable('Contestant')->find($contestant_id);
      $action->setRecipeId($contestant->getRecipeId());
      $action->setContestantId($contestant_id);
      $action->setUserId($user_id);
      $action->setActionId(6);
      $action->setMessage(self::getActionMessage(6, array('contest' => $contest_title)));
      if ($fb_user_id && $fb_object_id) {
        $action->setFbUserId($fb_user_id);
        $action->setFbObjectId($fb_object_id);
      }
      $action->setCreatedAt(date('Y-m-d H:i:s'));
      $action->save();
      return $action->getId();
    }
  }

  public static function addVotedRecipeContest($recipe_id, $recipe_title, $contestant_id, $user_id, $fb_user_id = null, $fb_object_id = null)
  {
    $obj = self::isVotedRecipeContest($recipe_id, $contestant_id, $user_id);
    if (!$obj) {
      $action = new UserActions();
      $action->setRecipeId($recipe_id);
      $action->setContestantId($contestant_id);
      $action->setUserId($user_id);
      $action->setActionId(7);
      $contest_title = Doctrine_Core::getTable('Contestant')->find($contestant_id)->getContest()->getName();
      $action->setMessage(self::getActionMessage(7, array('recipe' => $recipe_title, 'contest' => $contest_title)));
      if ($fb_user_id && $fb_object_id) {
        $action->setFbUserId($fb_user_id);
        $action->setFbObjectId($fb_object_id);
      }
      $action->setCreatedAt(date('Y-m-d H:i:s'));
      $action->save();
      return $action->getId();
    }
  }

  public static function addVotedPoll($option_id, $option_title, $poll_title, $user_id, $fb_user_id = null, $fb_object_id = null)
  {
    $obj = self::isVotedPoll($option_id, $user_id);
    if (!$obj) {
      $poll_option = Doctrine_Core::getTable('PollOption')->findOneById($option_id);
      $action = new UserActions();
      $action->setRecipeId($poll_option->getRecipeId());
      $action->setPollOptionId($option_id);
      $action->setUserId($user_id);
      $action->setActionId(8);
      $action->setMessage(self::getActionMessage(8, array('option' => $option_title, 'poll' => $poll_title)));
      if ($fb_user_id && $fb_object_id) {
        $action->setFbUserId($fb_user_id);
        $action->setFbObjectId($fb_object_id);
      }
      $action->setCreatedAt(date('Y-m-d H:i:s'));
      $action->save();
      return $action->getId();
    }
  }

  public static function getActionMessage($id, $params)
  {
    $str = '';
    $q = Doctrine_Core::getTable('Actions')->createQuery('a')->where('a.id = ?', array($id))->fetchOne();
    switch ($id) {
      case 1 :
      case 2 :
      case 3 :
      case 4 :
      case 5 :
        $str = str_replace('[name-of-recipe]', $params['recipe'], $q->getActionMessage());
        break;

      case 6 :
        $str = str_replace('[name-of-contest]', $params['contest'], $q->getActionMessage());
        break;

      case 7 :
        $s = array('[recipe-name]', '[name-of-contest]');
        $r = array($params['recipe'], $params['contest']);
        $str = str_replace($s, $r, $q->getActionMessage());
        break;

      case 8 :
        $s = array('[poll-option]', '[name-of-poll]');
        $r = array($params['option'], $params['poll']);
        $str = str_replace($s, $r, $q->getActionMessage());
        break;
    }
    return $str;
  }

  public static function getSavedRecipe($user_id, $recipe_id)
  {
    return Doctrine_Core::getTable('UserActions')->createQuery('u')->where('u.user_id = ? AND u.recipe_id = ? AND u.action_id = ?', array($user_id, $recipe_id, 3))->fetchOne();
  }

  public static function getMadeRecipe($user_id, $recipe_id)
  {
    return Doctrine_Core::getTable('UserActions')->createQuery('u')->where('u.user_id = ? AND u.recipe_id = ? AND u.action_id = ?', array($user_id, $recipe_id, 4))->fetchOne();
  }

}