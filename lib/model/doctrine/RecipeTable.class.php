<?php

/**
 * RecipeTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class RecipeTable extends Doctrine_Table
{

  /**
   * Returns an instance of this class.
   *
   * @return object RecipeTable
   */
  public static function getInstance()
  {
    return Doctrine_Core::getTable('Recipe');
  }

  /**
   * Returns the list of the recipes.
   *
   * @param array $params
   * @return list
   */
  public static function getList($params=array())
  {
    $max_item_count = null;
    $params['module'] = 'recipe';
    $weight_count = 0;
    $recipe_coll = array();
    $override = OverrideTable::getOverride($params);
    if ($override) {
      // Determine the available positions for the given area
      $position_counts = $override->getPositionCount();
      if (count($position_counts) > 0) {
        if (isset($params['is_mobile']) && $params['is_mobile'] == 1) {
          if ($override->getIsMobile()) {
            $item_count = intval($position_counts->getLast()->getCount());
          } else {
            $item_count = PositionCount::getDefault($params);
            $max_item_count = $item_count;
          }
        } else {
          $item_count = intval($position_counts->getLast()->getCount());
        }
      } else {
        $item_count = PositionCount::getDefault($params);
      }
      // Override the sorting
      $weighted_recipes = $override->getWeightedItems(ucfirst($params['module']), $max_item_count);
      $weight_count = count(@$weighted_recipes['item_ids']);
      $unweight_count = $item_count - $weight_count;
      if (isset($weighted_recipes['item_coll'])) {
        $recipe_coll = $weighted_recipes['item_coll'];
      }
      if ($unweight_count > 0) {
        $q = Doctrine_Core::getTable(ucfirst($params['module']))->createQuery('r');
        if (isset($params['category_id'])) {
          $q->innerjoin('r.CategoryRecipe cr')->innerjoin('cr.Category c')->where('r.is_active = ?', 1)->andWhere('c.is_active = ?', 1);
          // If the category is main category find the children category's recipes else its own recipes
          if (CategoryTable::isMainCategory($params['category_id'])) {
            $q->andWhere('c.parent_id = ?', $params['category_id']);
          } else {
            $q->andWhere('c.id = ?', $params['category_id']);
          }
        } else {
          $q->where('r.is_active = ?', 1);
        }
        if ($weight_count > 0) {
          $q->whereNotIn('r.id', $weighted_recipes['item_ids']);
        }
        $unweighted_recipes = $q->orderBy('r.views DESC')->limit($unweight_count)->execute();
        foreach ($unweighted_recipes as $unweighted_recipe) {
          $recipe_coll[] = $unweighted_recipe;
        }
      }
      return $recipe_coll;
    } else {
      $item_count = PositionCount::getDefault($params);
    }
    $q = Doctrine_Core::getTable(ucfirst($params['module']))->createQuery('r');
    if (isset($params['category_id'])) {
      $q->innerjoin('r.CategoryRecipe cr')->innerjoin('cr.Category c')->where('r.is_active = ?', 1)->andWhere('c.is_active = ?', 1);
      // If the category is main category find the children category's recipes else its own recipes
      if (CategoryTable::isMainCategory($params['category_id'])) {
        $q->andWhere('c.parent_id = ?', $params['category_id']);
      } else {
        $q->andWhere('c.id = ?', $params['category_id']);
      }
    }
    $unweighted_recipes = $q->orderBy('r.views DESC')->limit($item_count)->execute();
    foreach ($unweighted_recipes as $unweighted_recipe) {
      $recipe_coll[] = $unweighted_recipe;
    }
    return $recipe_coll;
  }

  public static function getWeightedItems($override)
  {
    //Returns an Array of the Override Items
    $weightedItemsArray = $override->getWeightedItems('Recipe');
    if (count($weightedItemsArray) > 0)
      return $weightedItemsArray['item_coll'];
    else
      return;
  }

  public static function getRecipes($params = null)
  {
    $q = Doctrine_Core::getTable('Recipe')->createQuery('r');
    $q->where('r.is_active = ?', 1);
    if (isset($params['user_id'])) {
      $q->andWhere('r.user_id = ?', $params['user_id']);
    }
    //Added conditions if the textbox is empty or contains original palceholder text -> return all of user's recipes
    if (isset($params['search_type']) && $params['search_type'] == 'name' && !empty($params['search_val']) && $params['search_val'] != "Find my recipe by entering it here...") {
      $q->andWhere('r.name LIKE ?', '%' . $params['search_val'] . '%');
    }
    $q->orderBy('r.name ASC');
    if (isset($params['limit'])) {
      $q->limit($params['limit']);
    } else {
      $q->limit(50);
    }
    return $q->execute();
  }

  public static function getFilteredRecipes($params = null)
  {
    $q = Doctrine_Core::getTable('Recipe')->createQuery('r');
    if (!empty($params['subcatid'])) {
      $q->innerjoin('r.CategoryRecipe cr')->where('cr.category_id =?', $params['subcatid']);
    }
    if (!empty($params['username']) && ($params['username'] != "username")) {
      $q->leftjoin('r.User u')->where('u.display_name LIKE ?', '%' . $params['username'] . '%');
    }
    if (isset($params['keywords']) && ($params['keywords'] != "keyword, title")) {
      $q->andWhere('r.keywords LIKE ?', '%' . $params['keywords'] . '%');
      $q->orWhere('r.name LIKE ?', '%' . $params['keywords'] . '%');
    }
    if (isset($params['sort'])) {
      switch ($params['sort']) {
        case "name":
          $q->orderBy('r.name ' . $params['sortDir']);
          break;
        case "rating":
          $q->orderBy('r.rating ' . $params['sortDir']);
          break;
        case "date":
          $q->orderBy('r.created_at ' . $params['sortDir']);
          break;
        case "date_edited":
          $q->orderBy('r.updated_at ' . $params['sortDir']);
          break;
        case "updated_by":
          $q->leftjoin('r.User2 u');
          $q->orderBy('u.display_name ' . $params['sortDir']);
          $q->addOrderBy('r.updated_at DESC');
          break;
        case "sponsor":
          $q->leftjoin('r.Sponsor s');
          $q->orderBy('s.name ' . $params['sortDir']);
          $q->addOrderBy('r.created_at DESC');
          break;
        case "active":
          $q->orderBy('r.is_active ' . $params['sortDir']);
          $q->addOrderBy('r.created_at DESC');
          break;
        default:
          $q->orderBy('r.created_at ' . $params['sortDir']);
      }
    } else
      $q->orderBy('r.created_at DESC');
    return $q;
  }

  public static function rate($recipe_id, $user, $rating)
  {
    if ($user->isAuthenticated()) {
      $rate = RateTable::getUserRating($recipe_id, $user->getAttribute('id'));
    } else {
      $recipe_ratings = $user->getAttribute('recipe_ratings', array());
      $rate = isset($recipe_ratings[$recipe_id]) ? $recipe_ratings[$recipe_id] : null;
    }
    $recipe = Doctrine_Core::getTable('Recipe')->find($recipe_id);
    if (!$rate) {
      // Add a rating record for the user
      if ($user->isAuthenticated()) {
        $rate = new Rate();
        $rate->create($recipe_id, $user->getAttribute('id'), $rating);
      } else {
        $recipe_ratings[$recipe_id] = $rating;
        $user->setAttribute('recipe_ratings', $recipe_ratings);
      }
      // Calculate the aggregated reting and rating count
      $rating_val = $recipe->getRating();
      $rating_count = $recipe->getRatingCount();
      $new_rating_count = $rating_count + 1;
      $new_rating_val = (($rating_val * $rating_count) + $rating) / $new_rating_count;
      $recipe->setRating(round($new_rating_val, 4));
      $recipe->setRatingCount($new_rating_count);
      $recipe->save();
    }
    return $recipe;
  }

  public static function updateSponsor($recipeId, $sponsorId)
  {
    if (isset($recipeId) && isset($sponsorId)) {
      $q = Doctrine_Query::create()->update('Recipe r');
      ($sponsorId != 0) ? $q->set('r.sponsor_id', '?', $sponsorId) : $q->set('r.sponsor_id', 'NULL');
      $q->set('r.updated_by_id', '?', intval(sfContext::getInstance()->getUser()->getAttribute('id')));
      $q->set('r.updated_at', '?', date('Y-m-d H:i:s'));
      $q->where('r.id = ?', $recipeId)->execute();
      return $q;
    }
  }
  
  public static function updateFeatured($recipeId, $isFeatured)
  {
    if (isset($recipeId) && isset($isFeatured)) {
      $q = Doctrine_Query::create()->update('Recipe r');
      $q->set('r.is_featured', '?', $isFeatured);
      $q->set('r.updated_at', '?', date('Y-m-d H:i:s'));
      $q->where('r.id = ?', $recipeId)->execute();
      return $q;
    }
  }

  public static function updateActive($recipeId, $active)
  {
    if (isset($recipeId) && isset($active)) {
      $q = Doctrine_Query::create()
        ->update('Recipe r')
        ->set('r.is_active', '?', $active)
        ->set('r.updated_by_id', '?', intval(sfContext::getInstance()->getUser()->getAttribute('id')))
        ->set('r.updated_at', '?', date('Y-m-d H:i:s'))
        ->where('r.id = ?', $recipeId)
        ->execute();
      return $q;
    }
  }

  public static function getRecentRecipesPaginated($category_id, $page_no=1, $results_per_page=25)
  {
    $recipes = new sfDoctrinePager('Recipe', $results_per_page);
    $recipes->setQuery(Doctrine_Core::getTable('Recipe')->createQuery('r')->leftJoin('r.Photo p')->innerJoin('r.CategoryRecipe c')->where('c.category_id = ?', $category_id)->andWhere('r.is_active = ?', 1)->orderby('p.image DESC, r.created_at DESC'));
    $recipes->setPage($page_no);
    $recipes->init();
    return $recipes;
  }

  public static function getUserRecipesPaginated($params =array())
  {
    $params = self::processParams($params);
    $recipes = new sfDoctrinePager('Recipe', $params['results_per_page']);
    switch ($params['folder']) {
      case 'all':
        $recipes->setQuery(Doctrine_Core::getTable('Recipe')->createQuery('r')->innerJoin('r.Saved s')->where('s.user_id = ?', $params['user_id'])->andWhere('r.is_active = ?', 1)->orderby('r.' . $params['sort_by'] . ' ' . $params['direction']));
        break;
      case 'saved';
        $recipes->setQuery(Doctrine_Core::getTable('Recipe')->createQuery('r')->where('r.is_active = ?', 1)->leftJoin('r.Saved s')->where('s.user_id = ?', $params['user_id'])->orderby('r.' . $params['sort_by'] . ' ' . $params['direction']));
        break;
      case 'personal';
        $recipes->setQuery(Doctrine_Core::getTable('Recipe')->createQuery('r')->where('r.user_id = ?', $params['user_id'])->andWhere('r.is_active = ?', 1)->orderby('r.' . $params['sort_by'] . ' ' . $params['direction']));
        break;
       case 'made';
        $recipes->setQuery(Doctrine_Core::getTable('Recipe')->createQuery('r')->where('r.is_active = ?', 1)->leftJoin('r.UserActions u')->where('u.user_id = ?', $params['user_id'])->andWhere('u.action_id= ?', 4)->orderby('r.' . $params['sort_by'] . ' ' . $params['direction']));
        break;
      default:
        $recipes->setQuery(Doctrine_Core::getTable('Recipe')->createQuery('r')->innerJoin('r.CollectionRecipe cr')->innerJoin('cr.Collection c')->where('c.user_id = ?', $params['user_id'])->andWhere('cr.collection_id = ?', $params['folder'])->andWhere('r.is_active = ?', 1)->orderby('r.' . $params['sort_by'] . ' ' . $params['direction']));
    }
    $recipes->setPage($params['page_no']);
    $recipes->init();
    return $recipes;
  }

  public static function processParams($params =array())
  {
    if (!isset($params['results_per_page'])) {
      $params['results_per_page'] = 5;
    }
    if (!isset($params['page_no'])) {
      $params['page_no'] = 1;
    }
    if (!isset($params['order_by'])) {
      $params['order_by'] = 'date-desc';
    }
    $params['order_by'] = str_replace('date', 'created_at', $params['order_by']);
    $order_by = explode('-', $params['order_by']);
    $params['sort_by'] = $order_by[0];
    $params['direction'] = $order_by[1];
    return $params;
  }

  public static function getUserRecipes($userId)
  {
    return Doctrine_Core::getTable('Recipe')->createQuery('r')->where('r.user_id = ?', $userId)->andWhere('r.is_active = ?', 1)->orderby('r.created_at desc');
  }

  public static function getRecipeSponsorName($id)
  {
    $q = Doctrine_Core::getTable('Sponsor')->createQuery('s')->leftJoin('s.Recipe r')->where('r.id = ?', $id);
    $sponsor = $q->fetchOne();
    return $sponsor['name'];
  }
  
  public static function getFeaturedBloggerRecipes()
  {
	  // fetch single user who is featured
	  $u = Doctrine_Core::getTable('User')->createQuery('u')->where('u.is_active = ?', 1)->andWhere('u.is_featured_blogger = ?', 1)->orderby('u.updated_at desc')->fetchOne();
	  if ( is_object($u) ) {
		  // fetch 4 featured recipes
		  $q = Doctrine_Core::getTable('Recipe')->createQuery('r')->innerJoin('r.User u')->where('r.user_id = ?', $u->getId())->andWhere('r.is_featured = ?', 1)->orderby('r.created_at desc')->limit(4);
		  return $q->execute();
		  //return $a = array('user' => $u, 'recipes' => $q->execute());
	  }
  }
  
   /**
   * Returns the list of the our best recipes.
   *
   * @param array $params
   * @return list
   */
  public static function getOurBestRecipes($params=array())
  {
    $max_item_count = null;
    $params['module'] = 'recipe';
    $weight_count = 0;
    $recipe_coll = array();
   
	$item_count = PositionCount::getDefault($params);
    $q = Doctrine_Core::getTable(ucfirst($params['module']))->createQuery('r');
    if (isset($params['category_id'])) {
      $q->innerjoin('r.CategoryRecipe cr')->innerjoin('cr.Category c')->where('r.is_active = ?', 1)->andWhere('c.is_active = ?', 1);
      // If the category is main category find the children category's recipes else its own recipes
      if (CategoryTable::isMainCategory($params['category_id'])) {
        $q->andWhere('c.parent_id = ?', $params['category_id']);
      } else {
        $q->andWhere('c.id = ?', $params['category_id']);
      }
    }else
	{
		$q->where('r.is_active = ?', 1);
	}
	
    $q->orderBy('r.created_at DESC');
	
	 if (isset($params['limit'])) {
      $q->limit($params['limit']);
    } else {
      $q->limit($item_count);
    }
	$unweighted_recipes = $q->execute();
    foreach ($unweighted_recipes as $unweighted_recipe) {
      $recipe_coll[] = $unweighted_recipe;
    }
    return $recipe_coll;
  }
  
  public static function getRecipeCategory($recipeId)
  {
	$q = Doctrine_Core::getTable('Category')->createQuery('c');
	return $q->innerJoin('c.CategoryRecipe cr')
      ->where('c.is_active = ?', 1)
      ->andWhere('cr.recipe_id = ?', $recipeId)
      ->fetchOne();
  }

}