<?php

/**
 * ContestTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class ContestTable extends Doctrine_Table {

  /**
   * Returns an instance of this class.
   *
   * @return object ContestTable
   */
  public static function getInstance() {
    return Doctrine_Core::getTable('Contest');
  }

  public static function getActiveContests() {
    $q = Doctrine_Core::getTable('Contest')->createQuery('c');
    //ADD MORE TIMEZONES BEFORE EASTERN TIME ZONE
    //Central Time Zone
    date_default_timezone_set(timezone_name_from_abbr("CST"));
    $q->where("c.start_date <= ? AND c.end_date >= ? AND c.timezone = 'CST'", array(date('Y-m-d'), date('Y-m-d')));
    //Eastern Time Zone
    date_default_timezone_set(timezone_name_from_abbr("EST"));
    $q->orWhere("c.start_date <= ? AND c.end_date >= ? AND c.timezone = 'EDT'", array(date('Y-m-d'), date('Y-m-d')));    
    $q->orderBy('c.sequence ASC');
    
    return $q;
  }

  public static function getPreviousContests() {
    $q = Doctrine_Core::getTable('Contest')->createQuery('c');
    //ADD MORE TIMEZONES BEFORE EASTERN TIME ZONE
    //Central Time Zone
    date_default_timezone_set(timezone_name_from_abbr("CST"));
    $q->where("c.end_date < ? AND c.timezone = 'CST'", date('Y-m-d'));
    //Eastern Time Zone
    date_default_timezone_set(timezone_name_from_abbr("EST"));
    $q->orWhere("c.end_date < ? AND c.timezone = 'EDT'", date('Y-m-d'));
    
    $q->orderBy('c.end_date DESC');

    return $q;
  }

  public static function getPendingContests() {
    $q = Doctrine_Core::getTable('Contest')->createQuery('c');
    //ADD MORE TIMEZONES BEFORE EASTERN TIME ZONE
    //Central Time Zone
    date_default_timezone_set(timezone_name_from_abbr("CST"));
    $q->where("c.start_date > ? AND c.timezone = 'CST'", date('Y-m-d'));
    //Eastern Time Zone
    date_default_timezone_set(timezone_name_from_abbr("EST"));
    $q->orWhere("c.start_date > ? AND c.timezone = 'EDT'", date('Y-m-d'));
    
    return $q;
  }
  
  public static function getContestsToRank(){
    $q = Doctrine_Core::getTable('Contest')->createQuery('c');
    //Subtracting one day to get contests that ended the day before so last ranking can occur
    //
    //ADD MORE TIMEZONES BEFORE EASTERN TIME ZONE
    //Central Time Zone
    date_default_timezone_set(timezone_name_from_abbr("CST"));
    $q->where("c.start_date < ? AND c.end_date >= ? AND c.timezone = 'CST'", array(date('Y-m-d'), date('Y-m-d', strtotime(date('Y-m-d')."-1 day"))));
    //Eastern Time Zone
    date_default_timezone_set(timezone_name_from_abbr("EST"));
    $q->orWhere("c.start_date < ? AND c.end_date >= ? AND c.timezone = 'EDT'", array(date('Y-m-d'), date('Y-m-d', strtotime(date('Y-m-d')."-1 day"))));    
    $q->orderBy('c.sequence ASC');
    
    return $q;
  }

  public static function getContestsAndIds()
  {
    $contests = array();

    date_default_timezone_set(timezone_name_from_abbr("CST"));
    $q = Doctrine_Core::getTable('Contest')->createQuery('c')->select('c.id, c.name')->where("c.end_date >= ? AND c.timezone = 'CST'", date('Y-m-d', strtotime(date('Y-m-d')."-1 day")))->fetchArray();

    foreach ($q as $c)
      $contests[$c['id']] = $c['name'];

    return $contests;
  }

  public static function updateSponsor($contestId, $sponsorId) {
    if (isset($contestId) && isset($sponsorId)) {
      $q = Doctrine_Query::create()->update('Contest c');
      ($sponsorId != 0) ? $q->set('c.sponsor_id', '?', $sponsorId) : $q->set('c.sponsor_id', 'NULL');
      $q->where('c.id = ?', $contestId)->execute();
      return $q;
    }
  }

}