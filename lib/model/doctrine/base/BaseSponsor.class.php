<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('Sponsor', 'doctrine');

/**
 * BaseSponsor
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property string $name
 * @property string $description
 * @property string $url
 * @property string $adtag
 * @property string $image
 * @property string $logo
 * @property integer $is_active
 * @property integer $user_id
 * @property timestamp $created_at
 * @property timestamp $updated_at
 * @property User $User
 * @property Doctrine_Collection $Article
 * @property Doctrine_Collection $Contest
 * @property Doctrine_Collection $Group
 * @property Doctrine_Collection $Recipe
 * @property Doctrine_Collection $Slideshow
 * 
 * @method integer             getId()          Returns the current record's "id" value
 * @method string              getName()        Returns the current record's "name" value
 * @method string              getDescription() Returns the current record's "description" value
 * @method string              getUrl()         Returns the current record's "url" value
 * @method string              getAdtag()       Returns the current record's "adtag" value
 * @method string              getImage()       Returns the current record's "image" value
 * @method string              getLogo()        Returns the current record's "logo" value
 * @method integer             getIsActive()    Returns the current record's "is_active" value
 * @method integer             getUserId()      Returns the current record's "user_id" value
 * @method timestamp           getCreatedAt()   Returns the current record's "created_at" value
 * @method timestamp           getUpdatedAt()   Returns the current record's "updated_at" value
 * @method User                getUser()        Returns the current record's "User" value
 * @method Doctrine_Collection getArticle()     Returns the current record's "Article" collection
 * @method Doctrine_Collection getContest()     Returns the current record's "Contest" collection
 * @method Doctrine_Collection getGroup()       Returns the current record's "Group" collection
 * @method Doctrine_Collection getRecipe()      Returns the current record's "Recipe" collection
 * @method Doctrine_Collection getSlideshow()   Returns the current record's "Slideshow" collection
 * @method Sponsor             setId()          Sets the current record's "id" value
 * @method Sponsor             setName()        Sets the current record's "name" value
 * @method Sponsor             setDescription() Sets the current record's "description" value
 * @method Sponsor             setUrl()         Sets the current record's "url" value
 * @method Sponsor             setAdtag()       Sets the current record's "adtag" value
 * @method Sponsor             setImage()       Sets the current record's "image" value
 * @method Sponsor             setLogo()        Sets the current record's "logo" value
 * @method Sponsor             setIsActive()    Sets the current record's "is_active" value
 * @method Sponsor             setUserId()      Sets the current record's "user_id" value
 * @method Sponsor             setCreatedAt()   Sets the current record's "created_at" value
 * @method Sponsor             setUpdatedAt()   Sets the current record's "updated_at" value
 * @method Sponsor             setUser()        Sets the current record's "User" value
 * @method Sponsor             setArticle()     Sets the current record's "Article" collection
 * @method Sponsor             setContest()     Sets the current record's "Contest" collection
 * @method Sponsor             setGroup()       Sets the current record's "Group" collection
 * @method Sponsor             setRecipe()      Sets the current record's "Recipe" collection
 * @method Sponsor             setSlideshow()   Sets the current record's "Slideshow" collection
 * 
 * @package    betterrecipes
 * @subpackage model
 * @author     Rusty Cage <rcage@resolute.com>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseSponsor extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('sponsor');
        $this->hasColumn('id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => true,
             'primary' => true,
             'autoincrement' => true,
             'length' => 4,
             ));
        $this->hasColumn('name', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 255,
             ));
        $this->hasColumn('description', 'string', null, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => '',
             ));
        $this->hasColumn('url', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 255,
             ));
        $this->hasColumn('adtag', 'string', null, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => '',
             ));
        $this->hasColumn('image', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 255,
             ));
        $this->hasColumn('logo', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 255,
             ));
        $this->hasColumn('is_active', 'integer', 1, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => true,
             'primary' => false,
             'default' => '1',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 1,
             ));
        $this->hasColumn('user_id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => true,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('created_at', 'timestamp', 25, array(
             'type' => 'timestamp',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 25,
             ));
        $this->hasColumn('updated_at', 'timestamp', 25, array(
             'type' => 'timestamp',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 25,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('User', array(
             'local' => 'user_id',
             'foreign' => 'id'));

        $this->hasMany('Article', array(
             'local' => 'id',
             'foreign' => 'sponsor_id'));

        $this->hasMany('Contest', array(
             'local' => 'id',
             'foreign' => 'sponsor_id'));

        $this->hasMany('Group', array(
             'local' => 'id',
             'foreign' => 'sponsor_id'));

        $this->hasMany('Recipe', array(
             'local' => 'id',
             'foreign' => 'sponsor_id'));

        $this->hasMany('Slideshow', array(
             'local' => 'id',
             'foreign' => 'sponsor_id'));
    }
}