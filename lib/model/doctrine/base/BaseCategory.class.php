<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('Category', 'doctrine');

/**
 * BaseCategory
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property string $name
 * @property string $slug
 * @property integer $parent_id
 * @property string $summary
 * @property string $title_tag
 * @property string $keywords
 * @property string $description
 * @property integer $is_active
 * @property integer $user_id
 * @property integer $onesite_id
 * @property integer $sequence
 * @property timestamp $created_at
 * @property timestamp $updated_at
 * @property enum $source
 * @property string $legacy_id
 * @property string $daily_dish_tag
 * @property Doctrine_Collection $Article
 * @property Doctrine_Collection $CategoryRecipe
 * @property Doctrine_Collection $Group
 * @property Doctrine_Collection $Override
 * @property Doctrine_Collection $Slideshow
 * 
 * @method integer             getId()             Returns the current record's "id" value
 * @method string              getName()           Returns the current record's "name" value
 * @method string              getSlug()           Returns the current record's "slug" value
 * @method integer             getParentId()       Returns the current record's "parent_id" value
 * @method string              getSummary()        Returns the current record's "summary" value
 * @method string              getTitleTag()       Returns the current record's "title_tag" value
 * @method string              getKeywords()       Returns the current record's "keywords" value
 * @method string              getDescription()    Returns the current record's "description" value
 * @method integer             getIsActive()       Returns the current record's "is_active" value
 * @method integer             getUserId()         Returns the current record's "user_id" value
 * @method integer             getOnesiteId()      Returns the current record's "onesite_id" value
 * @method integer             getSequence()       Returns the current record's "sequence" value
 * @method timestamp           getCreatedAt()      Returns the current record's "created_at" value
 * @method timestamp           getUpdatedAt()      Returns the current record's "updated_at" value
 * @method enum                getSource()         Returns the current record's "source" value
 * @method string              getLegacyId()       Returns the current record's "legacy_id" value
 * @method string              getDailyDishTag()   Returns the current record's "daily_dish_tag" value
 * @method Doctrine_Collection getArticle()        Returns the current record's "Article" collection
 * @method Doctrine_Collection getCategoryRecipe() Returns the current record's "CategoryRecipe" collection
 * @method Doctrine_Collection getGroup()          Returns the current record's "Group" collection
 * @method Doctrine_Collection getOverride()       Returns the current record's "Override" collection
 * @method Doctrine_Collection getSlideshow()      Returns the current record's "Slideshow" collection
 * @method Category            setId()             Sets the current record's "id" value
 * @method Category            setName()           Sets the current record's "name" value
 * @method Category            setSlug()           Sets the current record's "slug" value
 * @method Category            setParentId()       Sets the current record's "parent_id" value
 * @method Category            setSummary()        Sets the current record's "summary" value
 * @method Category            setTitleTag()       Sets the current record's "title_tag" value
 * @method Category            setKeywords()       Sets the current record's "keywords" value
 * @method Category            setDescription()    Sets the current record's "description" value
 * @method Category            setIsActive()       Sets the current record's "is_active" value
 * @method Category            setUserId()         Sets the current record's "user_id" value
 * @method Category            setOnesiteId()      Sets the current record's "onesite_id" value
 * @method Category            setSequence()       Sets the current record's "sequence" value
 * @method Category            setCreatedAt()      Sets the current record's "created_at" value
 * @method Category            setUpdatedAt()      Sets the current record's "updated_at" value
 * @method Category            setSource()         Sets the current record's "source" value
 * @method Category            setLegacyId()       Sets the current record's "legacy_id" value
 * @method Category            setDailyDishTag()   Sets the current record's "daily_dish_tag" value
 * @method Category            setArticle()        Sets the current record's "Article" collection
 * @method Category            setCategoryRecipe() Sets the current record's "CategoryRecipe" collection
 * @method Category            setGroup()          Sets the current record's "Group" collection
 * @method Category            setOverride()       Sets the current record's "Override" collection
 * @method Category            setSlideshow()      Sets the current record's "Slideshow" collection
 * 
 * @package    betterrecipes
 * @subpackage model
 * @author     Rusty Cage <rcage@resolute.com>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseCategory extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('category');
        $this->hasColumn('id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => true,
             'primary' => true,
             'autoincrement' => true,
             'length' => 4,
             ));
        $this->hasColumn('name', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 255,
             ));
        $this->hasColumn('slug', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 255,
             ));
        $this->hasColumn('parent_id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => true,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('summary', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 255,
             ));
        $this->hasColumn('title_tag', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 255,
             ));
        $this->hasColumn('keywords', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 255,
             ));
        $this->hasColumn('description', 'string', null, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => '',
             ));
        $this->hasColumn('is_active', 'integer', 1, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => true,
             'primary' => false,
             'default' => '1',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 1,
             ));
        $this->hasColumn('user_id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => true,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('onesite_id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('sequence', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => true,
             'primary' => false,
             'default' => '1',
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('created_at', 'timestamp', 25, array(
             'type' => 'timestamp',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 25,
             ));
        $this->hasColumn('updated_at', 'timestamp', 25, array(
             'type' => 'timestamp',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 25,
             ));
        $this->hasColumn('source', 'enum', 2, array(
             'type' => 'enum',
             'fixed' => 0,
             'unsigned' => false,
             'values' => 
             array(
              0 => 'nw',
              1 => 'br',
              2 => 'mb',
             ),
             'primary' => false,
             'default' => 'nw',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 2,
             ));
        $this->hasColumn('legacy_id', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 255,
             ));
        $this->hasColumn('daily_dish_tag', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 255,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasMany('Article', array(
             'local' => 'id',
             'foreign' => 'category_id'));

        $this->hasMany('CategoryRecipe', array(
             'local' => 'id',
             'foreign' => 'category_id'));

        $this->hasMany('Group', array(
             'local' => 'id',
             'foreign' => 'category_id'));

        $this->hasMany('Override', array(
             'local' => 'id',
             'foreign' => 'category_id'));

        $this->hasMany('Slideshow', array(
             'local' => 'id',
             'foreign' => 'category_id'));
    }
}