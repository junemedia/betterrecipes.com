<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('RecipeLike', 'doctrine');

/**
 * BaseRecipeLike
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property integer $user_id
 * @property integer $recipe_id
 * @property integer $is_liked
 * @property timestamp $created_at
 * @property timestamp $updated_at
 * @property Recipe $Recipe
 * @property User $User
 * 
 * @method integer    getId()         Returns the current record's "id" value
 * @method integer    getUserId()     Returns the current record's "user_id" value
 * @method integer    getRecipeId()   Returns the current record's "recipe_id" value
 * @method integer    getIsLiked()    Returns the current record's "is_liked" value
 * @method timestamp  getCreatedAt()  Returns the current record's "created_at" value
 * @method timestamp  getUpdatedAt()  Returns the current record's "updated_at" value
 * @method Recipe     getRecipe()     Returns the current record's "Recipe" value
 * @method User       getUser()       Returns the current record's "User" value
 * @method RecipeLike setId()         Sets the current record's "id" value
 * @method RecipeLike setUserId()     Sets the current record's "user_id" value
 * @method RecipeLike setRecipeId()   Sets the current record's "recipe_id" value
 * @method RecipeLike setIsLiked()    Sets the current record's "is_liked" value
 * @method RecipeLike setCreatedAt()  Sets the current record's "created_at" value
 * @method RecipeLike setUpdatedAt()  Sets the current record's "updated_at" value
 * @method RecipeLike setRecipe()     Sets the current record's "Recipe" value
 * @method RecipeLike setUser()       Sets the current record's "User" value
 * 
 * @package    betterrecipes
 * @subpackage model
 * @author     Rusty Cage <rcage@resolute.com>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseRecipeLike extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('recipe_like');
        $this->hasColumn('id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => true,
             'primary' => true,
             'autoincrement' => true,
             'length' => 4,
             ));
        $this->hasColumn('user_id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => true,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('recipe_id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => true,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('is_liked', 'integer', 1, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => true,
             'primary' => false,
             'default' => '1',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 1,
             ));
        $this->hasColumn('created_at', 'timestamp', 25, array(
             'type' => 'timestamp',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 25,
             ));
        $this->hasColumn('updated_at', 'timestamp', 25, array(
             'type' => 'timestamp',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 25,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Recipe', array(
             'local' => 'recipe_id',
             'foreign' => 'id'));

        $this->hasOne('User', array(
             'local' => 'user_id',
             'foreign' => 'id'));
    }
}