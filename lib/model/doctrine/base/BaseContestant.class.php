<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('Contestant', 'doctrine');

/**
 * BaseContestant
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property integer $recipe_id
 * @property integer $contest_id
 * @property integer $vote_count
 * @property integer $rank
 * @property integer $user_id
 * @property integer $email_status
 * @property integer $is_active
 * @property Contest $Contest
 * @property ContestPeriod $ContestPeriod
 * @property Recipe $Recipe
 * @property User $User
 * @property Doctrine_Collection $UserActions
 * @property Doctrine_Collection $Vote
 * 
 * @method integer             getId()            Returns the current record's "id" value
 * @method integer             getRecipeId()      Returns the current record's "recipe_id" value
 * @method integer             getContestId()     Returns the current record's "contest_id" value
 * @method integer             getVoteCount()     Returns the current record's "vote_count" value
 * @method integer             getRank()          Returns the current record's "rank" value
 * @method integer             getUserId()        Returns the current record's "user_id" value
 * @method integer             getEmailStatus()   Returns the current record's "email_status" value
 * @method integer             getIsActive()      Returns the current record's "is_active" value
 * @method Contest             getContest()       Returns the current record's "Contest" value
 * @method ContestPeriod       getContestPeriod() Returns the current record's "ContestPeriod" value
 * @method Recipe              getRecipe()        Returns the current record's "Recipe" value
 * @method User                getUser()          Returns the current record's "User" value
 * @method Doctrine_Collection getUserActions()   Returns the current record's "UserActions" collection
 * @method Doctrine_Collection getVote()          Returns the current record's "Vote" collection
 * @method Contestant          setId()            Sets the current record's "id" value
 * @method Contestant          setRecipeId()      Sets the current record's "recipe_id" value
 * @method Contestant          setContestId()     Sets the current record's "contest_id" value
 * @method Contestant          setVoteCount()     Sets the current record's "vote_count" value
 * @method Contestant          setRank()          Sets the current record's "rank" value
 * @method Contestant          setUserId()        Sets the current record's "user_id" value
 * @method Contestant          setEmailStatus()   Sets the current record's "email_status" value
 * @method Contestant          setIsActive()      Sets the current record's "is_active" value
 * @method Contestant          setContest()       Sets the current record's "Contest" value
 * @method Contestant          setContestPeriod() Sets the current record's "ContestPeriod" value
 * @method Contestant          setRecipe()        Sets the current record's "Recipe" value
 * @method Contestant          setUser()          Sets the current record's "User" value
 * @method Contestant          setUserActions()   Sets the current record's "UserActions" collection
 * @method Contestant          setVote()          Sets the current record's "Vote" collection
 * 
 * @package    betterrecipes
 * @subpackage model
 * @author     Rusty Cage <rcage@resolute.com>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseContestant extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('contestant');
        $this->hasColumn('id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => true,
             'primary' => true,
             'autoincrement' => true,
             'length' => 4,
             ));
        $this->hasColumn('recipe_id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => true,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('contest_id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => true,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('vote_count', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => true,
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('rank', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => true,
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('user_id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => true,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('email_status', 'integer', 1, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => true,
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 1,
             ));
        $this->hasColumn('is_active', 'integer', 1, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => true,
             'primary' => false,
             'default' => '1',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 1,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Contest', array(
             'local' => 'contest_id',
             'foreign' => 'id'));

        $this->hasOne('ContestPeriod', array(
             'local' => 'contest_id',
             'foreign' => 'contest_id'));

        $this->hasOne('Recipe', array(
             'local' => 'recipe_id',
             'foreign' => 'id'));

        $this->hasOne('User', array(
             'local' => 'user_id',
             'foreign' => 'id'));

        $this->hasMany('UserActions', array(
             'local' => 'id',
             'foreign' => 'contestant_id'));

        $this->hasMany('Vote', array(
             'local' => 'id',
             'foreign' => 'contestant_id'));
    }
}