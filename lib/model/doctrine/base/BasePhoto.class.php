<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('Photo', 'doctrine');

/**
 * BasePhoto
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property string $name
 * @property string $description
 * @property string $image
 * @property string $thumb
 * @property integer $sequence
 * @property integer $recipe_id
 * @property integer $user_id
 * @property timestamp $created_at
 * @property timestamp $updated_at
 * @property enum $source
 * @property string $legacy_id
 * @property Recipe $Recipe
 * @property User $User
 * @property Doctrine_Collection $PollOption
 * 
 * @method integer             getId()          Returns the current record's "id" value
 * @method string              getName()        Returns the current record's "name" value
 * @method string              getDescription() Returns the current record's "description" value
 * @method string              getImage()       Returns the current record's "image" value
 * @method string              getThumb()       Returns the current record's "thumb" value
 * @method integer             getSequence()    Returns the current record's "sequence" value
 * @method integer             getRecipeId()    Returns the current record's "recipe_id" value
 * @method integer             getUserId()      Returns the current record's "user_id" value
 * @method timestamp           getCreatedAt()   Returns the current record's "created_at" value
 * @method timestamp           getUpdatedAt()   Returns the current record's "updated_at" value
 * @method enum                getSource()      Returns the current record's "source" value
 * @method string              getLegacyId()    Returns the current record's "legacy_id" value
 * @method Recipe              getRecipe()      Returns the current record's "Recipe" value
 * @method User                getUser()        Returns the current record's "User" value
 * @method Doctrine_Collection getPollOption()  Returns the current record's "PollOption" collection
 * @method Photo               setId()          Sets the current record's "id" value
 * @method Photo               setName()        Sets the current record's "name" value
 * @method Photo               setDescription() Sets the current record's "description" value
 * @method Photo               setImage()       Sets the current record's "image" value
 * @method Photo               setThumb()       Sets the current record's "thumb" value
 * @method Photo               setSequence()    Sets the current record's "sequence" value
 * @method Photo               setRecipeId()    Sets the current record's "recipe_id" value
 * @method Photo               setUserId()      Sets the current record's "user_id" value
 * @method Photo               setCreatedAt()   Sets the current record's "created_at" value
 * @method Photo               setUpdatedAt()   Sets the current record's "updated_at" value
 * @method Photo               setSource()      Sets the current record's "source" value
 * @method Photo               setLegacyId()    Sets the current record's "legacy_id" value
 * @method Photo               setRecipe()      Sets the current record's "Recipe" value
 * @method Photo               setUser()        Sets the current record's "User" value
 * @method Photo               setPollOption()  Sets the current record's "PollOption" collection
 * 
 * @package    betterrecipes
 * @subpackage model
 * @author     Rusty Cage <rcage@resolute.com>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BasePhoto extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('photo');
        $this->hasColumn('id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => true,
             'primary' => true,
             'autoincrement' => true,
             'length' => 4,
             ));
        $this->hasColumn('name', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 255,
             ));
        $this->hasColumn('description', 'string', null, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => '',
             ));
        $this->hasColumn('image', 'string', 150, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 150,
             ));
        $this->hasColumn('thumb', 'string', 150, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 150,
             ));
        $this->hasColumn('sequence', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => true,
             'primary' => false,
             'default' => '1',
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('recipe_id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => true,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('user_id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => true,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('created_at', 'timestamp', 25, array(
             'type' => 'timestamp',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 25,
             ));
        $this->hasColumn('updated_at', 'timestamp', 25, array(
             'type' => 'timestamp',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 25,
             ));
        $this->hasColumn('source', 'enum', 2, array(
             'type' => 'enum',
             'fixed' => 0,
             'unsigned' => false,
             'values' => 
             array(
              0 => 'nw',
              1 => 'br',
              2 => 'mb',
             ),
             'primary' => false,
             'default' => 'nw',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 2,
             ));
        $this->hasColumn('legacy_id', 'string', 40, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 40,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Recipe', array(
             'local' => 'recipe_id',
             'foreign' => 'id'));

        $this->hasOne('User', array(
             'local' => 'user_id',
             'foreign' => 'id'));

        $this->hasMany('PollOption', array(
             'local' => 'id',
             'foreign' => 'photo_id'));
    }
}