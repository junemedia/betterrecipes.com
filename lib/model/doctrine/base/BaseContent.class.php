<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('Content', 'doctrine');

/**
 * BaseContent
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property enum $type
 * @property string $title
 * @property string $description
 * @property string $slug
 * @property string $keywords
 * @property integer $photo_id
 * @property integer $is_active
 * @property integer $sporsor_id
 * @property integer $user_id
 * @property timestamp $created_at
 * @property timestamp $updated_at
 * @property Sponsor $Sponsor
 * @property User $User
 * @property Doctrine_Collection $ContentMedium
 * 
 * @method integer             getId()            Returns the current record's "id" value
 * @method enum                getType()          Returns the current record's "type" value
 * @method string              getTitle()         Returns the current record's "title" value
 * @method string              getDescription()   Returns the current record's "description" value
 * @method string              getSlug()          Returns the current record's "slug" value
 * @method string              getKeywords()      Returns the current record's "keywords" value
 * @method integer             getPhotoId()       Returns the current record's "photo_id" value
 * @method integer             getIsActive()      Returns the current record's "is_active" value
 * @method integer             getSporsorId()     Returns the current record's "sporsor_id" value
 * @method integer             getUserId()        Returns the current record's "user_id" value
 * @method timestamp           getCreatedAt()     Returns the current record's "created_at" value
 * @method timestamp           getUpdatedAt()     Returns the current record's "updated_at" value
 * @method Sponsor             getSponsor()       Returns the current record's "Sponsor" value
 * @method User                getUser()          Returns the current record's "User" value
 * @method Doctrine_Collection getContentMedium() Returns the current record's "ContentMedium" collection
 * @method Content             setId()            Sets the current record's "id" value
 * @method Content             setType()          Sets the current record's "type" value
 * @method Content             setTitle()         Sets the current record's "title" value
 * @method Content             setDescription()   Sets the current record's "description" value
 * @method Content             setSlug()          Sets the current record's "slug" value
 * @method Content             setKeywords()      Sets the current record's "keywords" value
 * @method Content             setPhotoId()       Sets the current record's "photo_id" value
 * @method Content             setIsActive()      Sets the current record's "is_active" value
 * @method Content             setSporsorId()     Sets the current record's "sporsor_id" value
 * @method Content             setUserId()        Sets the current record's "user_id" value
 * @method Content             setCreatedAt()     Sets the current record's "created_at" value
 * @method Content             setUpdatedAt()     Sets the current record's "updated_at" value
 * @method Content             setSponsor()       Sets the current record's "Sponsor" value
 * @method Content             setUser()          Sets the current record's "User" value
 * @method Content             setContentMedium() Sets the current record's "ContentMedium" collection
 * 
 * @package    betterrecipes
 * @subpackage model
 * @author     Rusty Cage <rcage@resolute.com>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseContent extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('content');
        $this->hasColumn('id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => true,
             'primary' => true,
             'autoincrement' => true,
             'length' => 4,
             ));
        $this->hasColumn('type', 'enum', 9, array(
             'type' => 'enum',
             'fixed' => 0,
             'unsigned' => false,
             'values' => 
             array(
              0 => 'slideshow',
              1 => 'article',
              2 => 'video',
              3 => 'photo',
             ),
             'primary' => false,
             'default' => 'slideshow',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 9,
             ));
        $this->hasColumn('title', 'string', 150, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 150,
             ));
        $this->hasColumn('description', 'string', null, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => '',
             ));
        $this->hasColumn('slug', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 255,
             ));
        $this->hasColumn('keywords', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 255,
             ));
        $this->hasColumn('photo_id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => true,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('is_active', 'integer', 1, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => true,
             'primary' => false,
             'default' => '1',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 1,
             ));
        $this->hasColumn('sporsor_id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => true,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('user_id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => true,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('created_at', 'timestamp', 25, array(
             'type' => 'timestamp',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0000-00-00 00:00:00',
             'notnull' => false,
             'autoincrement' => false,
             'length' => 25,
             ));
        $this->hasColumn('updated_at', 'timestamp', 25, array(
             'type' => 'timestamp',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0000-00-00 00:00:00',
             'notnull' => false,
             'autoincrement' => false,
             'length' => 25,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Sponsor', array(
             'local' => 'sporsor_id',
             'foreign' => 'id'));

        $this->hasOne('User', array(
             'local' => 'user_id',
             'foreign' => 'id'));

        $this->hasMany('ContentMedium', array(
             'local' => 'id',
             'foreign' => 'content_id'));
    }
}