<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('UserActions', 'doctrine');

/**
 * BaseUserActions
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property integer $user_id
 * @property string $fb_user_id
 * @property string $fb_object_id
 * @property integer $action_id
 * @property integer $recipe_id
 * @property integer $poll_option_id
 * @property integer $contestant_id
 * @property string $message
 * @property timestamp $created_at
 * @property timestamp $updated_at
 * @property integer $is_active
 * @property Contestant $Contestant
 * @property PollOption $PollOption
 * @property Actions $Actions
 * @property Recipe $Recipe
 * @property User $User
 * 
 * @method integer     getId()             Returns the current record's "id" value
 * @method integer     getUserId()         Returns the current record's "user_id" value
 * @method string      getFbUserId()       Returns the current record's "fb_user_id" value
 * @method string      getFbObjectId()     Returns the current record's "fb_object_id" value
 * @method integer     getActionId()       Returns the current record's "action_id" value
 * @method integer     getRecipeId()       Returns the current record's "recipe_id" value
 * @method integer     getPollOptionId()   Returns the current record's "poll_option_id" value
 * @method integer     getContestantId()   Returns the current record's "contestant_id" value
 * @method string      getMessage()        Returns the current record's "message" value
 * @method timestamp   getCreatedAt()      Returns the current record's "created_at" value
 * @method timestamp   getUpdatedAt()      Returns the current record's "updated_at" value
 * @method integer     getIsActive()       Returns the current record's "is_active" value
 * @method Contestant  getContestant()     Returns the current record's "Contestant" value
 * @method PollOption  getPollOption()     Returns the current record's "PollOption" value
 * @method Actions     getActions()        Returns the current record's "Actions" value
 * @method Recipe      getRecipe()         Returns the current record's "Recipe" value
 * @method User        getUser()           Returns the current record's "User" value
 * @method UserActions setId()             Sets the current record's "id" value
 * @method UserActions setUserId()         Sets the current record's "user_id" value
 * @method UserActions setFbUserId()       Sets the current record's "fb_user_id" value
 * @method UserActions setFbObjectId()     Sets the current record's "fb_object_id" value
 * @method UserActions setActionId()       Sets the current record's "action_id" value
 * @method UserActions setRecipeId()       Sets the current record's "recipe_id" value
 * @method UserActions setPollOptionId()   Sets the current record's "poll_option_id" value
 * @method UserActions setContestantId()   Sets the current record's "contestant_id" value
 * @method UserActions setMessage()        Sets the current record's "message" value
 * @method UserActions setCreatedAt()      Sets the current record's "created_at" value
 * @method UserActions setUpdatedAt()      Sets the current record's "updated_at" value
 * @method UserActions setIsActive()       Sets the current record's "is_active" value
 * @method UserActions setContestant()     Sets the current record's "Contestant" value
 * @method UserActions setPollOption()     Sets the current record's "PollOption" value
 * @method UserActions setActions()        Sets the current record's "Actions" value
 * @method UserActions setRecipe()         Sets the current record's "Recipe" value
 * @method UserActions setUser()           Sets the current record's "User" value
 * 
 * @package    betterrecipes
 * @subpackage model
 * @author     Rusty Cage <rcage@resolute.com>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseUserActions extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('user_actions');
        $this->hasColumn('id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => true,
             'primary' => true,
             'autoincrement' => true,
             'length' => 4,
             ));
        $this->hasColumn('user_id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => true,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('fb_user_id', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 255,
             ));
        $this->hasColumn('fb_object_id', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 255,
             ));
        $this->hasColumn('action_id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => true,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('recipe_id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => true,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('poll_option_id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => true,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('contestant_id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => true,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('message', 'string', 500, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 500,
             ));
        $this->hasColumn('created_at', 'timestamp', 25, array(
             'type' => 'timestamp',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 25,
             ));
        $this->hasColumn('updated_at', 'timestamp', 25, array(
             'type' => 'timestamp',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 25,
             ));
        $this->hasColumn('is_active', 'integer', 1, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => true,
             'primary' => false,
             'default' => '1',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 1,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Contestant', array(
             'local' => 'contestant_id',
             'foreign' => 'id'));

        $this->hasOne('PollOption', array(
             'local' => 'poll_option_id',
             'foreign' => 'id'));

        $this->hasOne('Actions', array(
             'local' => 'action_id',
             'foreign' => 'id'));

        $this->hasOne('Recipe', array(
             'local' => 'recipe_id',
             'foreign' => 'id'));

        $this->hasOne('User', array(
             'local' => 'user_id',
             'foreign' => 'id'));
    }
}