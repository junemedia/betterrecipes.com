<?php

/**
 * ArticleTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class ArticleTable extends Doctrine_Table
{

  /**
   * Returns an instance of this class.
   *
   * @return object ArticleTable
   */
  public static function getInstance()
  {
    return Doctrine_Core::getTable('Article');
  }

  /**
   * Returns the list of the articles.
   *
   * @param array $params
   * @return list
   */
  public static function getList($params=array())
  {
    $max_item_count = null;
    $params['module'] = 'article';
    $weight_count = 0;
    $article_coll = array();
    $override = OverrideTable::getOverride($params);
    if ($override) {
      // Determine the available positions for the given area
      $position_counts = $override->getPositionCount();
      if (count($position_counts) > 0) {
        if (isset($params['is_mobile']) && $params['is_mobile'] == 1) {
          if ($override->getIsMobile()) {
            $item_count = intval($position_counts->getLast()->getCount());
          } else {
            $item_count = PositionCount::getDefault($params);
            $max_item_count = $item_count;
          }
        } else {
          $item_count = intval($position_counts->getLast()->getCount());
        }
      } else {
        $item_count = PositionCount::getDefault($params);
      }
      // Override the sorting
      $weighted_articles = $override->getWeightedItems(ucfirst($params['module']), $max_item_count);
      $weight_count = count(@$weighted_articles['item_ids']);
      $unweight_count = $item_count - $weight_count;
      if (isset($weighted_articles['item_coll'])) {
        $article_coll = $weighted_articles['item_coll'];
      }
      if ($unweight_count > 0) {
        $q = Doctrine_Core::getTable(ucfirst($params['module']))->createQuery('a')->Where('a.is_active = ?', 1);
        if (isset($params['category_id'])) {
          $q->andWhere('a.category_id = ?', $params['category_id']);
        }
        if ($weight_count > 0) {
          $q->whereNotIn('a.id', $weighted_articles['item_ids']);
        }
        $unweighted_articles = $q->orderBy('a.created_at DESC')->limit($unweight_count)->execute();
        foreach ($unweighted_articles as $unweighted_article) {
          $article_coll[] = $unweighted_article;
        }
      }
      return $article_coll;
    } else {
      $item_count = PositionCount::getDefault($params);
    }
    $q = Doctrine_Core::getTable(ucfirst($params['module']))->createQuery('a')->where('a.is_active = ?', 1);
    if (isset($params['category_id'])) {
      $q->andWhere('a.category_id = ?', $params['category_id']);
    }
    $unweighted_articles = $q->orderBy('a.created_at DESC')->limit($item_count)->execute();
    foreach ($unweighted_articles as $unweighted_article) {
      $article_coll[] = $unweighted_article;
    }
    return $article_coll;
  }

  public static function getWeightedItems($override)
  {
    //Returns an Array of the Override Items
    $weightedItemsArray = $override->getWeightedItems('Article');
    if (count($weightedItemsArray) > 0)
      return $weightedItemsArray['item_coll'];
    else
      return;
  }
  
  public static function getFilteredArticles($params)
  {
    $q = Doctrine_Core::getTable('Article')->createQuery('a');
    if (isset($params['articleName']) && ($params['articleName'] != "Article Name")) {
      $q->where('a.name LIKE ?', "%" . $params['articleName'] . "%");
    }
    if (isset($params['sort'])) {
      switch ($params['sort']) {
        case "name":
          $q->orderBy('a.name ' . $params['sortDir']);
          break;
        case "author":
          $q->leftjoin('a.User u');
          $q->orderBy('u.display_name ' . $params['sortDir']);
          $q->addOrderBy('a.created_at DESC');
          break;
        case "dateAdded":
          $q->orderBy('a.date_added ' . $params['sortDir']);
          break;
        case "sponsor":
          $q->leftjoin('a.Sponsor sp');
          $q->orderBy('sp.name ' . $params['sortDir']);
          $q->addOrderBy('a.created_at DESC');
          break;
        case "active":
          $q->orderBy('a.is_active ' . $params['sortDir']);
          $q->addOrderBy('a.created_at DESC');
          break;
        default:
          $q->orderBy('a.created_at ' . $params['sortDir']);
      }
    } else
      $q->orderBy('a.created_at DESC');

    return $q;
  }

  public static function updateActive($articleId, $active)
  {
    if (isset($articleId) && isset($active)) {
      $q = Doctrine_Query::create()
        ->update('Article a')
        ->set('a.is_active', '?', $active)
        ->where('a.id = ?', $articleId)
        ->execute();
      return $q;
    }
  }

  public static function updateSponsor($articleId, $sponsorId)
  {
    if (isset($articleId) && isset($sponsorId)) {
      $q = Doctrine_Query::create()->update('Article a');
      ($sponsorId != 0) ? $q->set('a.sponsor_id', '?', $sponsorId) : $q->set('a.sponsor_id', 'NULL');
      $q->where('a.id = ?', $articleId)->execute();
      return $q;
    }
  }

}