<?php

/**
 * Contest
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    betterrecipes
 * @subpackage model
 * @author     Rusty Cage <rcage@resolute.com>
 * @version    SVN: $Id: Builder.php 7691 2011-02-04 15:43:29Z jwage $
 */
class Contest extends BaseContest
{

  public function getImgSrc()
  {

    if ($this->getImage()) {
      return '/uploads/contest/' . $this->getImage();
    }
    else
      return '';
  }

  public function getLeadingContestant()
  {
    $contestant = Doctrine_Core::getTable('Contestant')->createQuery('c')->innerJoin('c.Recipe r')->innerJoin('r.CategoryRecipe cr')->where('c.contest_id = ?', $this->getId())->andWhere('c.is_active = 1')->andWhere('r.is_active = 1')->orderBy('rank')->fetchOne();
    if ($contestant)
      return $contestant;
    else
      return null;
  }

  public function isCurrent()
  {
    date_default_timezone_set(timezone_name_from_abbr($this->getTimezone()));
    if ($this->getStartDate() <= date('Y-m-d') && $this->getEndDate() >= date('Y-m-d')) {
      date_default_timezone_set(timezone_name_from_abbr("EST"));
      return true;
    } else {
      date_default_timezone_set(timezone_name_from_abbr("EST"));
      return false;
    }
  }

  public function isOver()
  {
    date_default_timezone_set(timezone_name_from_abbr($this->getTimezone()));
    if ($this->getEndDate() < date('Y-m-d')) {
      return true;
    } else {
      return false;
    }
  }

  public function getCurrentWeekOffset()
  {
    date_default_timezone_set(timezone_name_from_abbr($this->getTimezone())); //Timezone will be reset from controller after execution
    /* Week Offset
     * Subtract the end day from the current day to get the remaining days in the contest (no offset - ex: if it is last day $day_diff will be 0)
     * Then divide by 7 to get the correct week offset in the Contest Period table (ex: if 6 days left - 6 / 7 rounded down will be 0)
     * If day_diff < 0 then contest had ended
     */
    $day_diff = (strtotime($this->getEndDate()) - strtotime(date('Y-m-d'))) / (60 * 60 * 24);
    $offset = (int) ($day_diff / 7);

    if ($offset >= 0 && $day_diff >= 0)
      if (($offset) >= $this->getWeeks())
        return $this->getWeeks() - 1; //Contest hasnt started yet, return first offset period
      else
        return $offset; //Current Offset
        else
      return false; //Contest is over
  }

  public function getPastWeekOffset()
  {
    //Get date difference in days
    date_default_timezone_set(timezone_name_from_abbr($this->getTimezone())); //Timezone will be reset from controller after execution
    $day_diff = ((strtotime($this->getEndDate()) - strtotime(date('Y-m-d'))) / (60 * 60 * 24));

    if ($day_diff < 0) {
      //Check for last week (negative days mean contest is over - check if over within last 7 days)
      foreach (range(-1, -7) as $number) {
        if ($day_diff == $number)
          return 0; //Last week of the contest
      }
      return false;
    } else {
      $offset = (int) ($day_diff / 7);
      $offset++; //offset for weeks
      if ($offset >= $this->getWeeks()) {
        return false; //Contest has not started yet  
      } else {
        return $offset; //Return past week offset (CP Table)
      }
    }
  }

  public function getRankingOffset()
  {
    //Need to get the day offset for the week based on the previous day
    //NOTE: Contests that only are being ranked and therefore must have a previous offset are using/should be using this method
    date_default_timezone_set(timezone_name_from_abbr($this->getTimezone())); //Timezone will be reset from task after execution
    $day_diff = ((strtotime($this->getEndDate()) - strtotime(date('Y-m-d'))) / (60 * 60 * 24)) + 1; //offset for prior day
    $offset = (int) ($day_diff / 7);
    return $offset;
  }

  public function getStartingPastOffset()
  {
    if ($this->isCurrent()) {
      if ($this->getWeeks() > 0) {
        return $this->getCurrentWeekOffset() + 1;
      } else {
        return 1; // Started but no past weeks yet (1 week contest)
      }
    } else if ($this->isOver()) {
      return 0; //Contest is over, return 0 as starting past offset
    } else {
      return $this->getWeeks(); //Contest has not started, return 0 offsets
    }
  }

  public function updatedUnofficialWinner($print_results = false)
  {
    $contestants = Doctrine_Core::getTable('Contestant')->createQuery('ct')->innerJoin('ct.Recipe r')->where('ct.contest_id = ?', $this->getId())->orderBy('ct.is_active DESC, r.is_active DESC, ct.vote_count DESC')->execute();
    foreach ($contestants as $i => $ct) {
      $i++; //offset index
      $oldRank = $ct->getRank();
      $ct->setRank($i);
      $ct->save();
      if ($print_results) {
        echo $i . '. ' . $ct->getRecipe()->getName() . ' by ' . $ct->getUser()->getDisplayName() . ' - Previous Rank: #' . $oldRank;
        echo "\n";
      }
    }
    if ($print_results) {
      echo "\n";
    }
    //Update the unofficial contest winner for the week (previous day)      
    $weeklyPeriod = Doctrine_Core::getTable('ContestPeriod')->createQuery('cp')->where('cp.contest_id = ?', $this->getId())->andWhere('cp.week_offset = ?', $this->getRankingOffset())->fetchOne();
    $unofficialWinner = Doctrine_Core::getTable('Contestant')->createQuery('ct')->where('ct.contest_id = ?', $this->getId())->andWhere('ct.is_active = ?', 1)->orderBy('ct.rank ASC')->fetchOne();
    if (count($weeklyPeriod) > 0 && $unofficialWinner) {
      $weeklyPeriod->setUnofficialWinnerId($unofficialWinner->getId());
      $weeklyPeriod->save();
      if ($print_results) {
        echo "Updated Unofficial Winner: " . $unofficialWinner->getRecipe()->getName() . " by " . $unofficialWinner->getUser()->getDisplayName() . "\n\n";
      }
    } else {
      if ($print_results) {
        echo "There are no contestants entered into this contest.\n\n";
      }
    }
  }

}
