<?php

/**
 * ContestantTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class ContestantTable extends Doctrine_Table
{

  /**
   * Returns an instance of this class.
   *
   * @return object ContestantTable
   */
  public static function getInstance()
  {
    return Doctrine_Core::getTable('Contestant');
  }

  public static function getContestantsByContest($contestId, $hide_inactives = true)
  {
    $q = Doctrine_Query::create()->from('Contestant c')->innerJoin('c.Recipe r')->innerJoin('r.CategoryRecipe cr')->where('c.contest_id = ?', $contestId);
    if ($hide_inactives) {
      $q->andWhere('c.is_active = ?', 1);
      $q->andWhere('r.is_active = ?', 1);
    }
    $q->orderBy('c.rank ASC')->groupBy('c.id');
    return $q;
  }

  //Get the previous weeks user voted and editor selected winners
  public static function getPastWeekContestWinners()
  {
    $contests = Doctrine_Core::getTable('Contest')->createQuery('c')->execute();
    $query = '';
    foreach ($contests as $i => $c) {
      if ($c->getPastWeekOffset() >= 0) {
        $query .= '(cp.contest_id = ' . $c->getId() . ' AND cp.week_offset = ' . $c->getPastWeekOffset() . ')';
      }
      if (($i + 1) < count($contests))
        $query .= ' OR ';
    }
    //need to match the offsets with the correct contest id and group all of them together

    $q = Doctrine_Core::getTable('Contestant')->createQuery('c');
    $q->leftJoin('c.ContestPeriod cp');
    if (!empty($query))
      $q->andWhere($query);
    $q->andWhere('c.id = cp.official_winner_id OR c.id = cp.editor_winner_id');
    return $q;
  }

  public static function getAllPastWinners()
  {
    $q = Doctrine_Core::getTable('Contestant')->createQuery('ct');
    $q->leftJoin('ct.ContestPeriod cp ON (ct.id = cp.official_winner_id OR ct.id = cp.editor_winner_id)')->where('cp.week_end_date < ?', date('Y-m-d'))->orderBy('cp.week_end_date DESC');

    return $q;
  }

  public static function existsInContest($contest_id, $recipe_id, $other_contests = false)
  {
    $q = Doctrine_Core::getTable('Contestant')->createQuery('c')->innerJoin('c.Contest co')->where('co.start_date <= ?', date('Y-m-d'))->andWhere('co.end_date >= ?', date('Y-m-d'))->andWhere('co.is_active = ?', 1)->andWhere('c.recipe_id = ?', $recipe_id);
    if ($other_contests) {
      $q->andWhere('c.contest_id != ?', $contest_id);
    } else {
      $q->andWhere('c.contest_id = ?', $contest_id);
    }
    return $q->count();
  }
  
  public static function getContestReport($contestId) {
  	  $a = array();
	  if (isset($contestId) ) {
	  	$q = Doctrine_Core::getTable('Contestant')->createQuery('c')->select('COUNT(c.recipe_id) as total_recipes')->innerJoin('r.Recipe c')->where('c.contest_id = ?', $contest_id);
	  	$total_recipes = $q->fetchArray();
	  	print_r($total_recipes);
	  }
  }

}