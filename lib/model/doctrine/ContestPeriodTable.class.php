<?php

/**
 * ContestPeriodTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class ContestPeriodTable extends Doctrine_Table {

  /**
   * Returns an instance of this class.
   *
   * @return object ContestPeriodTable
   */
  public static function getInstance() {
    return Doctrine_Core::getTable('ContestPeriod');
  }

  public static function createNewContestPeriods($contest_obj) {
    $start_date = strtotime($contest_obj->getStartDate());
    $end_date = strtotime($contest_obj->getEndDate());

    $time_difference = $end_date - $start_date;
    $days = (int) ($time_difference / (60 * 60 * 24)) + 1; //+1 for offset (includes starting day)      
    $weeks = (int) ($days / 7);
    if (($days % 7) > 0)
      $weeks++; //offset if there are extra days

    for ($i = 0; $i < $weeks; $i++) {      
      $new_contest_period = new ContestPeriod();
      $new_contest_period->setContestId($contest_obj->getId());
      $new_contest_period->setUserId($contest_obj->getUserId());
      $new_contest_period->setCreatedAt(date('Y-m-d H:i:s'));
      $new_contest_period->setUpdatedAt(date('Y-m-d H:i:s'));
      
      //Find start and end dates
      $time = strtotime($contest_obj->getEndDate());
      if ($i == 0){        
        $cp_end_date = date('Y-m-d', strtotime($contest_obj->getEndDate()));
      }else {
        $offset = 7 * $i;
        $cp_end_date = date('Y-m-d', strtotime($contest_obj->getEndDate().' -'.$offset.' day ')); //Subtract the offset * 6 from the end date of the contest
      }
      $cp_start_date = date('Y-m-d', strtotime($cp_end_date.' -6 day'));     
      $new_contest_period->setWeekStartDate($cp_start_date);      
      $new_contest_period->setWeekEndDate($cp_end_date);
      $new_contest_period->setWeekOffset($i);
      $new_contest_period->save();
    }
    return $weeks;
  }

  public static function getCurrentContestPeriod($contest_id) {
    $q = Doctrine_Core::getTable('ContestPeriod')->createQuery('cp');
    $q->where('cp.contest_id = ?', $contest_id);
    //Calculate week offset
    $contest_obj = Doctrine_Core::getTable('Contest')->find($contest_id);
    //Return the current contest period or if the contest is over then return the first one
    if ($contest_obj->isCurrent()) { // Contest is active
      $offset = $contest_obj->getCurrentWeekOffset();
      $q->andWhere('cp.week_offset = ?', $offset);
    } else if ($contest_obj->isOver()) {  // Contest is over 
      $q->andWhere('cp.week_offset = ?', 0);
    } else { // Contest has not started
      $q->andWhere('cp.week_offset = ?', $contest_obj->getWeeks() - 1);
    }

    $obj = $q->fetchOne();
    return $obj;
  }

  public static function getAllContestPeriods($contest_id) {
    $q = Doctrine_Core::getTable('ContestPeriod')->createQuery('cp');
    $q->where('cp.contest_id = ?', $contest_id);
    $q->orderBy('cp.week_offset DESC');
    return $q->execute();
  }

}